# -*- coding: utf-8 -*-
"""Matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zS75GSw9BBl-3-WvHWn7AkSJpqK_e-gm
"""

import matplotlib
matplotlib.__version__

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files
from datetime import datetime



"""**ANOTAÇÕES**



ANOTAR AQUI O QUE PRECISA

"""

# hrs = {}
# arq = open('/content/PLAO/coleta/openstack1_10.159.205.6_history.txt')
# linha = arq.readline()

# while linha != "":
#   value = linha.split(',')
#   value = value[0].split('-')
#   value = value[1]
#   if value not in hrs:
#     hrs[value] = []
#     hrs[value].append("cpu1 " + linha.split(',')[6])
#   else:
#     hrs[value].append("cpu1 " + linha.split(',')[6])

#   linha = arq.readline()
# arq.close()

# arq = open('/content/PLAO/coleta/openstack2_10.159.205.12_history.txt')
# linha = arq.readline()

# while linha != "":
#   value = linha.split(',')
#   value = value[0].split('-')
#   value = value[1]
#   if value not in hrs:
#     hrs[value] = []
#     hrs[value].append("cpu2 " + linha.split(',')[6])
#   else:
#     hrs[value].append("cpu2 " + linha.split(',')[6])
#   linha = arq.readline()
# arq.close()

# arq = open('/content/PLAO/coleta/LINK_openstack2_history.txt')
# linha = arq.readline()

# while linha != "":
#   value = linha.split(',')
#   value = value[0].split('-')
#   value = value[1]
#   if value not in hrs:
#     hrs[value] = []
#     hrs[value].append("latency " + linha.split(',')[4])
#   else:
#     hrs[value].append("latency " + linha.split(',')[4])
#   linha = arq.readline()
# arq.close()


# arq = open('/content/PLAO/coleta/openstack1_10.159.205.6_history.txt')
# linha = arq.readline()

# while linha != "":
#   if linha.split(',')[5] != 'NVM':
#     value = linha.split(',')
#     value = value[0].split('-')
#     value = value[1]
#     if value not in hrs:
#       hrs[value] = []
#       hrs[value].append("nvm_C1 " + linha.split(',')[5])
#     else:
#       hrs[value].append("nvm_C1 " + linha.split(',')[5])

#   linha = arq.readline()
# arq.close()

# arq = open('/content/PLAO/coleta/openstack2_10.159.205.12_history.txt')
# linha = arq.readline()

# while linha != "":
#   if linha.split(',')[5] != 'NVM':
#     value = linha.split(',')
#     value = value[0].split('-')
#     value = value[1]
#     if value not in hrs:
#       hrs[value] = []
#       hrs[value].append("nvm_C2 " + linha.split(',')[5])
#     else:
#       hrs[value].append("nvm_C2 " + linha.split(',')[5])

#   linha = arq.readline()
# arq.close()

# for item in hrs:
#   print("hrs: ", item, " ", hrs[item], end="\n")

# latency = []
# cpu1 = []
# cpu2 = []
# nvm_c1 = []
# nvm_c2 = []

# hrs_dic = sorted(hrs)
# # print(hrs_dic)


# for item in hrs_dic:
#   cpus = hrs[item]
#   for itens in cpus:
#     if itens.split()[0] == 'cpu1':
#       cpu1.append(int(itens.split()[1]))
      
#       if cpu2 == []:
#         cpu2.append(0)
#       else:
#         last = cpu2[-1]
#         cpu2.append(last)
      
#       if  latency == []:
#         latency.append(0)
#       else:
#         last = latency[-1]
#         latency.append(last)
      
#       if  nvm_c1 == []:
#         nvm_c1.append(0)
#       else:
#         last = nvm_c1[-1]
#         nvm_c1.append(last)
      
#       if  nvm_c2 == []:
#         nvm_c2.append(0)
#       else:
#         last = nvm_c2[-1]
#         nvm_c2.append(last)
      
  
#     if itens.split()[0] == 'cpu2':
#       cpu2.append(int(itens.split()[1]))
      
#       if cpu1 == []:
#         cpu1.append(0)
#       else:
#         last = cpu1[-1]
#         cpu1.append(last)
      
#       if  latency == []:
#         latency.append(0)
#       else:
#         last = latency[-1]
#         latency.append(last)


#       if  nvm_c1 == []:
#         nvm_c1.append(0)
#       else:
#         last = nvm_c1[-1]
#         nvm_c1.append(last)
      
#       if  nvm_c2 == []:
#         nvm_c2.append(0)
#       else:
#         last = nvm_c2[-1]
#         nvm_c2.append(last)

#     if itens.split()[0] == 'latency':
#       latency.append(int(itens.split()[1]))   
      
#       if cpu1 == []:
#         cpu1.append(0)
#       else:
#         last = cpu1[-1]
#         cpu1.append(last)
      
#       if  cpu2 == []:
#         cpu2.append(0)
#       else:
#         last = cpu2[-1]
#         cpu2.append(last)

#       if  nvm_c1 == []:
#         nvm_c1.append(0)
#       else:
#         last = nvm_c1[-1]
#         nvm_c1.append(last)
      
#       if  nvm_c2 == []:
#         nvm_c2.append(0)
#       else:
#         last = nvm_c2[-1]
#         nvm_c2.append(last)

#     if itens.split()[0] == 'nvm_C1':
#       nvm_c1.append(int(itens.split()[1]))
      
#       if cpu1 == []:
#         cpu1.append(0)
#       else:
#         last = cpu1[-1]
#         cpu1.append(last)
      
#       if  cpu2 == []:
#         cpu2.append(0)
#       else:
#         last = cpu2[-1]
#         cpu2.append(last)

#       if  latency == []:
#         latency.append(0)
#       else:
#         last = latency[-1]
#         latency.append(last)
      
#       if  nvm_c2 == []:
#         nvm_c2.append(0)
#       else:
#         last = nvm_c2[-1]
#         nvm_c2.append(last)



#     if itens.split()[0] == 'nvm_C2':
#       nvm_c2.append(int(itens.split()[1]))
      
#       if cpu1 == []:
#         cpu1.append(0)
#       else:
#         last = cpu1[-1]
#         cpu1.append(last)
      
#       if  cpu2 == []:
#         cpu2.append(0)
#       else:
#         last = cpu2[-1]
#         cpu2.append(last)

#       if  latency == []:
#         latency.append(0)
#       else:
#         last = latency[-1]
#         latency.append(last)
      
#       if  nvm_c1 == []:
#         nvm_c1.append(0)
#       else:
#         last = nvm_c1[-1]
#         nvm_c1.append(last)

# print(nvm_c1)

# print("itens em latencia: ", len(latency))
# print("itens em cpu1: ", len(cpu1))
# print("itens em cpu2: ", len(cpu2))
# print("itens em nvm_c1: ", len(nvm_c1))
# print("itens em nvm_c2: ", len(nvm_c2))
# print(len(hrs_dic))

# colunas = ['data','cloud','IP','%CPU','MEMORY','NVM','%VCPU','MEMORYC','DISKC']

# df = pd.read_csv('/content/PLAO/coleta/openstack1_10.159.205.6_history.txt')

# # df = pd.read('https://github.com/laudelinojr/PLAO/blob/main/coleta/openstack1_10.159.205.6_history.txt')
# df.columns = colunas
# # print(df.head())
# # print(df['%VCPU'])
# # df = df.set_index('data')
# # print(df.head())

# df1 = pd.read_csv('/content/PLAO/coleta/openstack2_10.159.205.12_history.txt')
# df1.columns = colunas
# # df1 = df1.set_index('data')



# # cpu1 = df['%CPU']
# # cpu2 = df1['%CPU']


# # date =  df['data']
# # date_hours = []
# # for item in date:
# #   hours = item.split('-') 
# #   date_hours.append(hours[1])

# hrs_sorted = sorted(hrs)

# hrs_coleta = []
# hrs_coleta.append(hrs_sorted[0])

# for i in range(len(hrs_sorted)):
#   if i % 10 == 0:
#     hrs_coleta.append(hrs_sorted[i]) 


# x1 = np.linspace(0, 2000.0, num = 519)
# x2 = np.linspace(0, 2000.0, num= 519)
# x3 = np.linspace(0, 2000.0, num= 519)
# x4 = np.linspace(0, 2000.0, num= 519)
# x5 = np.linspace(0, 2000.0, num= 519)


# y1 = latency
# y2 = cpu1
# y3 = cpu2
# y4 = nvm_c1
# y5 = nvm_c2


# fig, (ax1,ax2,ax3,ax4,ax5) = plt.subplots(5, 1)
# fig.suptitle('A tale of 3 subplots')

# ax1.plot(x1, y1, 'o-')
# ax1.set_ylim((0,25))
# ax1.set_yscale('linear')
# ax1.set_ylabel('latency')

# ax2.plot(x2, y2, '.-')
# ax2.set_ylabel('Vcpu1')
# ax2.set_ylim((0,100))

# ax3.plot(x3, y3, '.-')
# ax3.set_ylabel('vcpu2')
# ax3.set_ylim((0,100))

# ax4.plot(x4, y4, '.-')
# ax4.set_ylabel('ncpu1')
# ax4.set_ylim((0,8))

# ax5.plot(x5, y5, '.-')
# ax5.set_ylabel('ncpu1')
# ax5.set_ylim((0,100))


# plt.subplots_adjust(hspace= 0)
# plt.gcf().set_size_inches(15, 12)

colunas = ['data','cloud','IP','%CPU','MEMORY','NVM','%VCPU','MEMORYC','DISKC']
colunas_latency = ['data','cloud','IP','a','latency','b',]

df1 = pd.read_csv('coleta/LINK_openstack1_history.txt')
df1.columns = colunas_latency

latency = df1['latency']
data1 = pd.to_datetime(df1['data'], dayfirst=False, yearfirst=False)

df2 = pd.read_csv('content/PLAO/coleta/openstack1_10.159.205.6_history.txt')
df2.columns = colunas
df2 = df2.drop(labels=[28,55,82,109], axis=0)
cpu1 = df2['%VCPU']
nvm1 = df2['NVM']
data2 = pd.to_datetime(df2['data'], dayfirst=False, yearfirst=False)

df3 = pd.read_csv('coleta/openstack2_10.159.205.12_history.txt')
df3.columns = colunas
df3 = df3.drop(labels=[16,33,51,69], axis=0)


cpu2 = df3['%VCPU']
nvm2 = df3['NVM']
data3 = pd.to_datetime(df3['data'], dayfirst=False, yearfirst=False)

arq = open('coleta/CONFIG_OSM_history.txt')

datas = []
linha = arq.readline()
while linha != "":
  values = linha.split()
  data = values[0]
  data = data.split('-')
  data = data[1]
  datas.append(data)
  linha = arq.readline()

data4 = pd.to_datetime(datas, dayfirst=False, yearfirst=False)
actions = [1] * len(datas)

actions2 =  [1] * 4
data5 = []
data5.append(data4[0])
data5.append(data4[20])
data5.append(data4[25])
data5.append(data4[30])
# data5.append(data4[40])

x1 = data1
x2 = data2
x3 = data3
x4 = data4
x5 = data5

y1 = latency
y2 = cpu1
y3 = cpu2
y4 = nvm1
y5 = nvm2
y6 = actions
y7 = actions2

fig, (ax1,ax2,ax3,ax4,ax5,ax6) = plt.subplots(6, 1)
fig.suptitle('TITULO')

# ax1.plot(x1, y1, 'o-')
ax1.plot(x1, y1)
ax1.set_ylim((0,25))
ax1.set_ylabel('LATENCY')
plt.xticks(rotation=45)

# ax2.plot(x2, y2, 'o-')
ax2.plot(x2, y2)
ax2.set_ylim((0,100))
ax2.set_ylabel('CPU1')
# plt.xticks(rotation=45)

ax3.plot(x3, y3)
ax3.set_ylim((0,100))
ax3.set_ylabel('CPU2')
# plt.xticks(rotation=45)

ax4.plot(x2, y4)
ax4.set_ylim((0,8))
ax4.set_ylabel('NVM1')
# plt.xticks(rotation=45)

ax5.plot(x3, y5)
ax5.set_ylim((0,8))
ax5.set_ylabel('NVM2')
# plt.xticks(rotation=45)

ax6.scatter(x4, y6, c='r')
ax6.set_ylim((0,2))
ax6.set_ylabel('teste')
ax6.scatter(x5, y7, c='b', marker='d')



plt.subplots_adjust(hspace = 0)
plt.gcf().set_size_inches(15, 12)

